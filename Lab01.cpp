// Lab01.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
// Студент группы ЭВТ-22 Иванов Александр.

#include <iostream> //1.1 lab. Директива, подключение доп.библиотек. Скопировать и вставить содержимое файла заголовка. 
					//подобее using но без переноса, а просто скопировать и вставить
					//include не подключает
					//соответствующую стандартную библиотеку, а только
					//позволяют вставить в текст программы описания из
					//указанного заголовочного файла.
					// Библиотека iostream вклчюает потоки ввода данных от клавиатуры
					// cin и вывода данных на экран дисплея cout.
#include <math.h>   // для функции pow(вычисления степени)

int main() //Метод(Функция Мейн, которая возвращает число)
{

	int x = 1;                      // 1.2 Типы данных, целочисленные

	const int c = 22;               // Объявление константы.(Значение константы нельзя в будущем поменять)

	float a = -10.45;               // Представляет вещественное число ординарной точности с плавающей точкой. Разница между флоатом и даблом диапазон чисел, 
									// а так же занятие места в памяти 4 байта (32 бита)

	double b = 0.00105;             // Представляет вещественное число двойной точности с плавающей точкой 8 байт (64 бита)

	char h = 'H';                   // представляет один символ в кодировке ASCII = 1 Байт.

	wchar_t e = 'e';                // представляет расширенный символ. На Windows занимает в памяти 2 байта (16 бит). 
									// Может хранить любой значение из диапазона от 0 до 65 535 (при 2 байтах), либо от 0 до 4 294 967 295 (для 4 байт)

	int l = 2 << 2;                 // Лаб. 1.3. Только для целочисленных типов данных. 10  на два разрядов влево = 1000 - 8. 
									// Число 2 в двоичном представлении 10. Если сдвинуть число 10 на два разряда влево, 
									// то получится 1000, что в десятичной системе равно число 8.

	int k = 16 >> 3;                // Лаб. 1.3. 10000 на три разряда вправо = 10 - 2
									// Число 16 в двоичном представлении 10000. Если сдвинуть число 10 на три разряда вправо (три последних разряда отбрасываются), 
									// то получится 10, что в десятичной системе представляет число 2.


	c > 0 ? a : x;                  // Лаб. 1.3. Тернарная операция Аналог if, else. Если C = true, выполнится A, false выполнится X.


	// Операции присваивания. Бинарные операции.
	int i = 5;
	i += 10;        // 15
	i -= 3;         // 12
	i *= 2;         // 24
	i /= 6;         // 4
	i <<= 4;      // 64
	i >>= 2;      // 16

	//&& and
	//|| or


	int f = 6 & 2;          // 110 & 010 = 10  - 2
							// 6 & 2. Число 6 в двоичной записи равно 110, а число 2 - 10 или 010. 
							// Умножим соответствующие разряды обоих чисел. Произведение обоих разрядов равно 1, если оба этих разряда равны 1. Иначе произведение равно 0.

	// ^ (поразрядное исключающее «ИЛИ»)
	int g = 5 ^ 2;          // 101 ^ 010 = 111 - 7

	// Задача 1 тип float, Вариант 3.

	// Числитель
	float value1 = 1000; 
	float value2 = 0.0001;

	float result = pow((value1 + value2), 3); //Получаем результат первой скобки (1000+0.0001)^3. Функция pow позволяет посчитать число в степени.

	float result2 = pow(value1, 3); // Возводим в 3 степень 1000.

	float result3 = pow((value1), 2); // Возводим 1000 в 2 степень. 

	float numerator = result - (result2 + 3 * result3 * value2); // Получаем значение числителя (1000 + 0.0001)^3 - (1000^3 + 3 * 1000^2 * 0.0001, (a+b)^3 - (a^3+3a^2b) ) 
	
	// Знаменатель
	float result4 = pow((value2), 2); //0.0001 в 2 степень

	float result5 = pow((value2), 3); //0.0001 в 3 степень

	float denominator = 3 * value1 * result4 + result5; // Вычисление знаменателя (3ab^2 + b^3)

	float total = numerator / denominator; // Выполняем и получаем решение всего примера.

	std::cout << total << '\n'; // Результат примера

	//////////////////////////////////////

	// Задача 1 тип double, Вариант 3.

	// Числитель
	double dvalue1 = 1000;
	double dvalue2 = 0.0001;

	double dresult = pow((dvalue1 + dvalue2), 3); //Получаем результат первой скобки (1000+0.0001)^3. Функция pow позволяет посчитать число в степени.

	double dresult2 = pow(dvalue1, 3); // Возводим в 3 степень 1000.

	double dresult3 = pow((dvalue1), 2); // Возводим 1000 в 2 степень. 

	double dnumerator = dresult - (dresult2 + 3 * dresult3 * dvalue2); // Получаем значение числителя (1000 + 0.0001)^3 - (1000^3 + 3 * 1000^2 * 0.0001, (a+b)^3 - (a^3+3a^2b) ) 

	// Знаменатель
	double dresult4 = pow((dvalue2), 2); //0.0001 в 2 степень

	double dresult5 = pow((dvalue2), 3); //0.0001 в 3 степень

	double ddenominator = 3 * dvalue1 * dresult4 + dresult5; // Вычисление знаменателя (3ab^2 + b^3)

	double dtotal = dnumerator / ddenominator; // Выполняем и получаем решение всего примера.

	std::cout << dtotal << '\n'; // Результат примера


	return 0; // возвращаем 0, т.к функция должна что-то возвращать)

}
